{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","the-doc/tests/app.lint-test.js","the-doc/tests/helpers/destroy-app.js","the-doc/tests/helpers/module-for-acceptance.js","the-doc/tests/helpers/resolver.js","the-doc/tests/helpers/start-app.js","the-doc/tests/integration/components/draw-canvas-test.js","the-doc/tests/integration/components/nav-bar-test.js","the-doc/tests/integration/components/upload-field-test.js","the-doc/tests/integration/helpers/document-count-test.js","the-doc/tests/integration/helpers/get-page-padding-test.js","the-doc/tests/integration/helpers/is-equal-test.js","the-doc/tests/integration/helpers/not-equal-test.js","the-doc/tests/integration/helpers/note-helper-style-test.js","the-doc/tests/integration/helpers/page-anchor-id-test.js","the-doc/tests/integration/helpers/page-note-style-test.js","the-doc/tests/integration/helpers/status-icon-class-test.js","the-doc/tests/test-helper.js","the-doc/tests/tests.lint-test.js","the-doc/tests/unit/controllers/application-test.js","the-doc/tests/unit/controllers/document-test.js","the-doc/tests/unit/controllers/documents-test.js","the-doc/tests/unit/controllers/index-test.js","the-doc/tests/unit/models/document-test.js","the-doc/tests/unit/models/redacted-elem-test.js","the-doc/tests/unit/models/redacted-test.js","the-doc/tests/unit/routes/application-test.js","the-doc/tests/unit/routes/document-test.js","the-doc/tests/unit/routes/documents-test.js","the-doc/tests/unit/routes/index-test.js","the-doc/tests/unit/services/login-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('the-doc/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/draw-canvas.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/draw-canvas.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/nav-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-bar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/upload-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/upload-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/document.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/document.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/documents.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/documents.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/document-count.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/document-count.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/get-page-padding.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-page-padding.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/is-equal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-equal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/not-equal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/not-equal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/note-helper-style.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/note-helper-style.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/page-anchor-id.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/page-anchor-id.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/page-note-style.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/page-note-style.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/status-icon-class.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/status-icon-class.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/document.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/document.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/redacted-elem.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/redacted-elem.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/redacted.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/redacted.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/document.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/document.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/documents.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/documents.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/docu.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/docu.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/login.js should pass ESLint\\n\\n');\n  });\n});","define('the-doc/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    _ember.default.run(application, 'destroy');\n  }\n});","define('the-doc/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'the-doc/tests/helpers/start-app', 'the-doc/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var Promise = _ember.default.RSVP.Promise;\n});","define('the-doc/tests/helpers/resolver', ['exports', 'the-doc/resolver', 'the-doc/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('the-doc/tests/helpers/start-app', ['exports', 'ember', 'the-doc/app', 'the-doc/config/environment'], function (exports, _ember, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = _ember.default.merge({}, _environment.default.APP);\n    attributes = _ember.default.merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember.default.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('the-doc/tests/integration/components/draw-canvas-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('draw-canvas', 'Integration | Component | draw canvas', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"9Zwiq1eY\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"draw-canvas\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Sx/I1dyt\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"draw-canvas\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('the-doc/tests/integration/components/nav-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('nav-bar', 'Integration | Component | nav bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ntAlUnVm\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"nav-bar\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UKwhv7kh\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"nav-bar\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('the-doc/tests/integration/components/upload-field-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('upload-field', 'Integration | Component | upload field', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"iZVHfWiA\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"upload-field\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"7zxwU6jM\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"upload-field\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('the-doc/tests/integration/helpers/document-count-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('document-count', 'helper:document-count', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"MBD13Wto\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"document-count\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('the-doc/tests/integration/helpers/get-page-padding-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('get-page-padding', 'helper:get-page-padding', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zw2rBdjn\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"get-page-padding\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('the-doc/tests/integration/helpers/is-equal-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('is-equal', 'helper:is-equal', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"c7U3Ujiu\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"is-equal\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('the-doc/tests/integration/helpers/not-equal-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('not-equal', 'helper:not-equal', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"B2bFh99Z\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"not-equal\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('the-doc/tests/integration/helpers/note-helper-style-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('note-helper-style', 'helper:note-helper-style', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Yhq8YT7e\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"note-helper-style\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('the-doc/tests/integration/helpers/page-anchor-id-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('page-anchor-id', 'helper:page-anchor-id', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mQfD/tO/\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"page-anchor-id\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('the-doc/tests/integration/helpers/page-note-style-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('page-note-style', 'helper:page-note-style', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8CmqGSEu\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"page-note-style\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('the-doc/tests/integration/helpers/status-icon-class-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('status-icon-class', 'helper:status-icon-class', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tU6LXX1S\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"status-icon-class\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('the-doc/tests/test-helper', ['the-doc/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('the-doc/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/draw-canvas-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/draw-canvas-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/nav-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/upload-field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/upload-field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/document-count-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/document-count-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/get-page-padding-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/get-page-padding-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/is-equal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/is-equal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/not-equal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/not-equal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/note-helper-style-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/note-helper-style-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/page-anchor-id-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/page-anchor-id-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/page-note-style-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/page-note-style-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/status-icon-class-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/status-icon-class-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/document-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/document-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/documents-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/documents-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/document-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/document-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/redacted-elem-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/redacted-elem-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/redacted-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/redacted-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/document-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/document-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/documents-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/documents-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/login-test.js should pass ESLint\\n\\n');\n  });\n});","define('the-doc/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('the-doc/tests/unit/controllers/document-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:document', 'Unit | Controller | document', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('the-doc/tests/unit/controllers/documents-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:documents', 'Unit | Controller | documents', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('the-doc/tests/unit/controllers/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:index', 'Unit | Controller | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('the-doc/tests/unit/models/document-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('document', 'Unit | Model | document', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('the-doc/tests/unit/models/redacted-elem-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('redacted-elem', 'Unit | Model | redacted elem', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('the-doc/tests/unit/models/redacted-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('redacted', 'Unit | Model | redacted', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('the-doc/tests/unit/routes/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('the-doc/tests/unit/routes/document-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:document', 'Unit | Route | document', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('the-doc/tests/unit/routes/documents-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:documents', 'Unit | Route | documents', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('the-doc/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('the-doc/tests/unit/services/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:login', 'Unit | Service | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('the-doc/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfile":"tests.js"}